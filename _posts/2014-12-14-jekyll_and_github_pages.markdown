---
layout: post
title:  "Blogging with Jekyll and GitHub pages"
date:   2014-12-14 13:54:00
categories: jekyll github
---

This post describes my setup for blogging. It is based on [Jekyll] for generating the content, and [GitHub pages] for serving. There are plenty of extra frameworks to achieve the same result. However, for me, those frameworks add to much layer of complexity and potential maintenance burden. I want a setup that is _closer to the metal_, with a minimum set of components and technologies involved so:

* I understand what I'm doing and how things work
* I can go away from blogging from some time without that knowledge obsoleting
* It is simple to operate and maintain

The main problem I had to solve, and which I am documenting here is that [GitHub pages] runs [Jekyll] in _safe_ mode, which means it is impossible to have plugins. But my posts will have many common patterns that I want to automate, and I want to be [DRY](http://en.wikipedia.org/wiki/Don%27t_repeat_yourself). Hence I need plugins. And then it comes slightly more complicated.

# Principle

The overall principle is to have a single repository with two branches. One that contains the source of the blog, and adequately named `source`. And one that contains the generated site, which must be named `master` for GitHub pages to serve it. It is thus more complicated than just having the source in the `master` branch and letting github generate the site on the fly, a wonderful feature of [GitHub pages] if it were able to support plugins. 

# Creating the source branch

We have to create a new repository with Jekyll boilerplate.  By default, the fist branch of a new git repository is named `master`, which is unfortunate, so we use a bit of git magic to name that branch `source` instead.

{% terminal %}
$ jekyll new xadeck.github.io
New jekyll site installed in /private/tmp/xadeck.github.io.
$ cd xadeck.github.io
$ git init .
Initialized empty Git repository in /private/tmp/xadeck.github.io/.git/
$ git checkout -b source
Switched to a new branch 'source'
$ git add .
$ git commit -m "Initial jekyll scaffold"
[source (root-commit) c3c3638] Initial jekyll scaffold
 16 files changed, 807 insertions(+)
 create mode 100644 .gitignore
 create mode 100644 _config.yml
 ...
 create mode 100644 index.html
 {% endterminal %}

# Creating the master branch

Create the github repository <http://xadeck.github.io> by navigating to your GitHub account and clicking "Create Repository". Then push `source` branch to it.

{% terminal %}
$ git remote add origin https://github.com/Xadeck/xadeck.github.io.git
$ git push -u origin source
{% endterminal %}

At that stage, nothing shows up on <http://xadeck.github.io>, because as mentioned earlier, there is no `master` branch which is the one whose content GitHub serves. Let's create one, with a dummy index page, and push it:

{% terminal %}
$ git checkout --orphan master
$ git reset --hard # Removes every file in directory
$ echo 'Coming soon' > index.html
$ git add .
$ git commit -m "Initial GitHub page"
$ git push -u origin master
{% endterminal %}

Now the "Coming soon" page is shown on <http://xadeck.github.io>.

# Setting up workflow

At this stage, we will setup the workflow to edit post in markdown language inside the `source` page, generate the HTML pages (that is Jekyll's job) inside the `master` branch, and push it to GitHub. The key elements here are:

* Use the standard ruby mechanism of `Gemfile` and [bundler] to manage dependencies
* Use git's ability to have a git repository inside another git repository

We will depend on the `github-pages` gem. This gem has two purposes. First it pulls all dependencies needed to use Jekyll. Then it ensures the versions of those dependencies matches the ones in [GitHub pages]. We don't really need that second property, since it's goal is to ensure that pages generated locally will match those generated by [GitHub pages] upon push. But the first property is a simple and stable way to have a running Jekyll locally. So, let's first create a `Gemfile`.

{% terminal %}
$ cat > Gemfile <<END
/source 'https://rubygems.org'
/gem 'github-page'
/END
{% endterminal %}

And perform install with [bundler] (assuming a prior `gem install bundler`). We take care of adding files to the repository, or ignore them appropriately both in `.gitgnore`, so that git status is not polluted by irrelevant by-products, and in `_config.yml` so that Jekyll will not copy them when generating the site.

{% terminal %}
$ bundle install
$ echo Gemfile.lock >> .gitignore
$ echo "exclude: [Gemfile, Gemfile.lock]" >> _config.yml
$ git add Gemfile .gitignore _config.yml
$ git commit -m "Configured Gemfile" 
{% endterminal %}

With that in place, we can now generate the site and push it to `master` branch. The if

{% terminal %}
$ jekyll build
$ pushd _site
$ git add -A
$ git commit -m "First generation"
$ git push  # in the _site directory, so pushes to `master` branch
$ popd
{% endterminal %}

Now the generated site shows up at <http://xadeck.githu.io>.
Note that there is no need for .nojekyll in the source tree.

Added to Gemfile:

  gem 'jekyll-assets'
  
And updated the install:

bundle  

Enabled the plugin by adding to _config.yml

  # Enabled plugins
  gems: [jekyll-assets]
  
Create a favicon in _assets/(images directory.

  mkdir -p _assets/images
  git add _assets

Use that in the _includes/head.html file:

  <link href="{{ 'favicon.png' | asset_path }}" rel="icon">  
  
  
Then commit the changes:

git commit -m "Added assets plugin and favicon" -a
jekyll serve

Make a rakefile to automate the push:

  require "rubygems"

  desc "Deploy to Github Pages"
  task :deploy do
    puts "## Deploying to Github Pages"

    puts "## Generating site"
    system "jekyll build"

    cd "_site" do
      system "git add -A"

      message = "Site updated at #{Time.now.utc}"
      puts "## Commiting: #{message}"
      system "git commit -m \"#{message}\""

      puts "## Pushing generated site"
      system "git push"

      puts "## Deploy Complete!"
    end
  end
  
and push it:

git add Rakefile
perl -p -i -e 's(\Qexclude: [Gemfile, Gemfile.lock])(exclude: [Gemfile, Gemfile.lock, Rakefile])' _config.yml
git commit -m "Added Rakefile" Rakefile _config.yml
rake deploy
  
Finally, push the `source` branch:

git push

Next steps.
Added jekyll-sitemaps

[Jekyll]:       http://jekyllrb.com/
[GitHub pages]: https://pages.github.com/
[bundler]:      http://bundler.io/