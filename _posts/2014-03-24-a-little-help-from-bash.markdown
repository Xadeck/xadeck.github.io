---
layout: post
title: "A little help from Bash..."
date: 2014-03-24 21:46:39 +0100
comments: false
categories: bash tools
published: false
---

When working with the shell, there are commands that you use sufficiently enough to remember their syntax and (most common) options. You don't need to open the man pages to check that `ls -a` also lists hidden files. But there are commands that you only use once in a while, only in one of their flavors. And every time, you have to browse the (typically dense) man pages in another tab to check what was the name of the flag. In that post, I'll show a handy Bash trick to save you the burden.

<!-- more -->

# The context

Let's start with an example. I often use `grep` to search things in my source tree[^1]. In order to find in which post I talked about 'help', I would simply type at the root of my Jekyll repository:

{% terminal %}
$ grep -i help -r .
{% endterminal %}

Because I remember that `-i` is for case insensitive and `-r` for recursive.  Most of the time, the result is not large and I can visually parse it so I'm done. But in this case, it would contain not only the source file I'm looking for, but also all things generated by Octopress for my blog. But I know that the source file is a `.markdown` one. So I want to only recursively grep such files. 

I remember it's possible, but I don't remember the flag. 

Also, I don't want to print the line, I just want the name of the matching file. Here again, I remember there is a flag, but not which one. The man page is the solution, but it's too demanding because `grep` actually has many flags, and I mostly use 5 of them, two which I remember (`-i` and `-r`) and others that I keep forgetting.

# The solution

One solution to that problem is to switch to [tcsh] shell, which has a very handy feature called `run-help`, documented in [its man page](http://linux.die.net/man/1/tcsh). Basically, you can put short help text for `command` in a file named `command.help` and placed in a directory pointed by environment variable `HPATH`. Then, when pressing **Alt-h** on the command line, the content of the file matching the current command you're typing will be displayed after the prompt.

But for various reasons, I work with Bash at the time of writing this post, so I decided to emulate a similar functionality in Bash. Here is my solution. **It works only in Bash4** so if you have a Mac, even with a recent Maveric OS X, you'll have to upgrade [^2]. It uses the fact that you can define Bash functions and bind them to key shortcuts with `bind -x`, which then pass the current command line as `READLINE_LINE` variable. So I put the following in my `.bashrc` configuration file:

{% highlight bash %}
# Support for TCSH-like short help. Works only for Bash 4.
HPATH=~/.bash_help.d

function bash_help() {
  # Take the currently edited line and find the first word
  COMMAND=$(echo $READLINE_LINE | cut -d' ' -f1)
  # If not empty, search for a file named after this in the HPATH,
  # warning the user if that variable is not set. If file is found,
  # its content is output, otherwise, nothing is done.
  if [[ $COMMAND ]]; then
    COMMAND_HELP=$HPATH/${COMMAND}.help
    if [ -r "$COMMAND_HELP" -a -f "$COMMAND_HELP" ]; then
      # Note that help files should have a line feed on last line!
      cat $COMMAND_HELP
    fi
  fi
}

bind -x '"\eh": bash_help'
{% endhighlight %}

Then I created a directory `~/.bash_help.d` and put in there a file `grep.help` that looks like this:

    grep -i help -r . --include *.markdown -l

Now here is what it looks like

# Extra notes

I found about the `READLINE_LINE` in the [Bash Builtins documentation](http://www.gnu.org/software/bash/manual/html_node/Bash-Builtins.html), at the `bind -x` section. Looking there you'll find there is also a `READLINE_POINT`. Re-using the principle shown in this post, you can easily define more powerful tools.

[tcsh]:       http://www.tcsh.org/Welcome
[BeyondGrep]: http://beyondgrep.com/

[^1]: There is a better alternative than `grep` for that, which is `ack`. See [BeyondGrep].
[^2]: Read that post to figure out how to upgrade.